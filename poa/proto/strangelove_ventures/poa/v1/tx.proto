syntax = "proto3";
package strangelove_ventures.poa.v1;

import "cosmos/base/v1beta1/coin.proto";
import "strangelove_ventures/poa/v1/validator.proto";
import "strangelove_ventures/poa/v1/params.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/strangelove-ventures/poa";

// SetPower sets the new power of the validator and accepts new validators into the set.
message MsgSetPower {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "poa/MsgSetPower";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 power = 3;
  bool unsafe = 4;
}

// MsgRemoveValidator removes an active validitor from the set and unbonds their delegations.
message MsgRemoveValidator {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "poa/MsgRemoveValidator";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgRemovePending removes an pending validator from the queue.
message MsgRemovePending {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "poa/MsgRemovePending";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgUpdateStakingParams is the Msg/UpdateStakingParams request type.
message MsgUpdateStakingParams {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "poa/MsgUpdateStakingParams";

  // sender is the address of the admin account with permission to update.
  // ex: governance, multisig/DAO, or standard account found in Params.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // x/staking  module parameters (all must be supplied).
  StakingParams params = 2 [ (gogoproto.nullable) = false ];
}

// cosmos-sdk/proto/staking/v1beta1/tx.proto
// MsgCreateValidator defines a SDK message for creating a new validator.
message MsgCreateValidator {
  option (cosmos.msg.v1.signer) = "validator_address";
  option (amino.name) = "poa/MsgCreateValidator";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  Description description = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  CommissionRates commission = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  string min_self_delegation = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // Deprecated: Use of Delegator Address in MsgCreateValidator is deprecated.
  // The validator address bytes and delegator address bytes refer to the same
  // account while creating validator (defer only in bech32 notation).
  string delegator_address = 4
      [ (cosmos_proto.scalar) = "cosmos.AddressString", deprecated = true ];
  string validator_address = 5
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  google.protobuf.Any pubkey = 6
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
}
